@model Inventory.Models.SalePrice

@{
    ViewBag.Title = "Create";
}

<div class="container mt-2">
    <h2>Create Sale Price</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="card">
            <div class="card-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group row mt-3">
                    <div class="col-md-2">
                        Category
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.CategoryId, ViewBag.Categories as SelectList, "Select Category", new { @class = "form-control", id = "categorySelect" })
                        @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row mt-3">
                    <div class="col-md-2">
                        Product
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.ProductId, ViewBag.Products as SelectList, "Select Product", new { @class = "form-control", id = "productSelect" })
                        @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row mt-3">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", placeholder = "Price" } })
                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row mt-2">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-dark" />
                    </div>
                </div>
            </div>
        </div>
    }
    <p>
        @Html.ActionLink("Back to List", "Index", null, new { @class = "mt-2 btn btn-outline-dark" })
    </p>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        // Function to fetch products based on the selected category
        function getProductsByCategory(categoryId) {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetProductsByCategory", "SalePrices")',
                data: { categoryId: categoryId },
                success: function (data) {
                    // Clear the previous options and add new options for products
                    var productSelect = $("#productSelect");
                    productSelect.empty();
                    $.each(data, function (i, product) {
                        productSelect.append($('<option></option>').val(product.Value).html(product.Text));
                    });
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
            });
        }

        // On document ready, fetch products based on the selected category (if any)
        $(document).ready(function () {
            var selectedCategoryId = $("#categorySelect").val();
            getProductsByCategory(selectedCategoryId);
        });

        // On change of the category dropdown, fetch products based on the selected category
        $("#categorySelect").change(function () {
            var selectedCategoryId = $(this).val();
            getProductsByCategory(selectedCategoryId);
        });
    </script>
}
