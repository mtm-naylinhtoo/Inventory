@model Inventory.Models.Township

@{
    ViewBag.Title = "Edit";
}

<div class="container mt-2">
    <h2>Edit Township</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="card">
            <div class="card-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                @Html.HiddenFor(model => model.ID)
                @Html.HiddenFor(model => model.IsActive)
                @Html.HiddenFor(model => model.CreatedDate)
                @Html.HiddenFor(model => model.CreatedUserId)
                @Html.HiddenFor(model => model.IsDeleted)
                @Html.HiddenFor(model => model.DeletedDate)
                @Html.HiddenFor(model => model.DeletedUserId)

                <div class="form-group row mt-3">
                    <div class="col-md-2">
                        State
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.StateId, ViewBag.States as SelectList, "Select State", new { @class = "form-control", id = "stateSelect" })
                        @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row mt-3">
                    <div class="col-md-2">
                        City
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.CityId, ViewBag.Cities as SelectList, "Select City", new { @class = "form-control", id = "citySelect" })
                        @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row mt-3">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", placeholder = "Code" } })
                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row mt-3">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Name" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row mt-3">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.SortOrder, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SortOrder, new { htmlAttributes = new { @class = "form-control", placeholder = "Sort Order" } })
                        @Html.ValidationMessageFor(model => model.SortOrder, "", new { @class = "text-danger" })
                    </div>
                </div>

                <!-- Add other form fields here... -->

                <div class="form-group row mt-2">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-dark" />
                    </div>
                </div>
            </div>
        </div>
    }
    <p>
        @Html.ActionLink("Back to List", "Index", null, new { @class = "mt-2 btn btn-outline-dark" })
    </p>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        // Function to fetch cities based on the selected state
        function getCitiesByState(stateId) {
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCitiesByState", "Townships")',
                data: { stateId: stateId },
                success: function (data) {
                    // Clear the previous options and add new options for cities
                    var citySelect = $("#citySelect");
                    citySelect.empty();
                    $.each(data, function (i, city) {
                        citySelect.append($('<option></option>').val(city.Value).html(city.Text));
                    });
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
            });
        }


        // On change of the state dropdown, fetch cities based on the selected state
        $("#stateSelect").change(function () {
            var selectedStateId = $(this).val();
            getCitiesByState(selectedStateId);
        });
    </script>
}
